<div class="mx-auto px-4 py-8">
    <section class="mb-">
        <!-- Judul -->
        <h2 class="text-4xl font-bold text-center mb-12 text-text-light">Most Popular Posts</h2>

        <!-- Container carousel -->
        <div class="w-full mx-auto py-4">
            <div class="relative overflow-hidden">
                <!-- Carousel wrapper -->
                <div class="carousel-container overflow-hidden">
                    <div id="carousel-track" class="flex transition-transform duration-300 ease-in-out">
                        <!-- Slide 1 -->
                        @foreach ($posts as $post)
                            <article class="flex-shrink-0 w-full md:w-1/3 mr-4">
                                <div class="bg-white rounded-lg overflow-hidden">
                                    <img alt="A digital clock on a table next to a cup of tea"
                                        class="w-full h-56 object-cover"
                                        src="{{ !empty($post->cover_url) ? $post->cover_url : asset('img/default-popular.png') }}"
                                        alt="{{ $post->title }}" />
                                    <div class="p-6">
                                        <div class="text-md mb-2">
                                            <a href="{{ route('category.posts', $post->category_slug) }}"
                                                class="font-bold text-black">{{ $post->category_name }}</a>
                                            <span class="text-gray-500">â€” {{ $post->created_at }}</span>
                                        </div>
                                        <a href="{{ route('post.show', $post->slug) }}">
                                            <h3 class="text-lg font-bold mt-2 text-text-light ">
                                                {{ $post->title }}
                                            </h3>
                                        </a>
                                        <p class="mt-2 text-gray-500">
                                            {{ Str::limit(strip_tags(Str::markdown($post->description)), 100, '...') }}
                                        </p>
                                        <a href="{{ route('posts.byAuthor', $post->author_slug) }}"
                                            class="flex items-center mt-6">
                                            <img alt="Sergy Campbell" class="h-10 w-10 rounded-full"
                                                src="{{ $post->author_avatar ?? asset('img/default-user.png') }}"
                                                alt="{{ $post->author_name }}" />
                                            <div class="ml-4">
                                                <p class="text-sm font-semibold text-text-light ">
                                                    {{ $post->author_name }}
                                                </p>
                                                <p class="text-xs text-subtext-light ">
                                                    {{ $post->author_occupation }}
                                                </p>
                                            </div>
                                        </a>
                                    </div>
                                </div>
                            </article>
                        @endforeach
                    </div>
                </div>

                <!-- Navigation -->
                <div class="flex justify-center items-center mt-2 space-x-4">
                    <button id="prevBtn"
                        class="text-subtext-light text-sm hover:text-green-500 transition-colors disabled:opacity-50 disabled:cursor-not-allowed">
                        Prev
                    </button>
                    <div class="flex space-x-2" id="indicators">
                        <!-- Indicators will be generated by JavaScript -->
                    </div>
                    <button id="nextBtn"
                        class="text-subtext-light text-sm hover:text-green-500 transition-colors disabled:opacity-50 disabled:cursor-not-allowed">
                        Next
                    </button>
                </div>
            </div>
        </div>
    </section>
</div>

@push('scripts')
    <script>
        class ManualCarousel {
            constructor() {
                this.track = document.getElementById('carousel-track');
                this.prevBtn = document.getElementById('prevBtn');
                this.nextBtn = document.getElementById('nextBtn');
                this.indicatorsContainer = document.getElementById('indicators');

                this.currentSlide = 0;
                this.slides = this.track.children;
                this.totalSlides = this.slides.length;
                this.slidesPerView = window.innerWidth >= 768 ? 3 : 1; // 3 slides on desktop, 1 on mobile
                this.maxSlide = this.totalSlides - this.slidesPerView;

                this.init();
            }

            init() {
                this.createIndicators();
                this.updateCarousel();
                this.bindEvents();
                this.handleResize();
            }

            createIndicators() {
                this.indicatorsContainer.innerHTML = '';
                const totalIndicators = this.maxSlide + 1;

                for (let i = 0; i <= this.maxSlide; i++) {
                    const indicator = document.createElement('button');
                    indicator.className = 'h-2 w-2 rounded-full transition-colors';
                    indicator.addEventListener('click', () => this.goToSlide(i));
                    this.indicatorsContainer.appendChild(indicator);
                }
            }

            updateCarousel() {
                // Calculate slide width
                const slideWidth = this.slidesPerView === 1 ? 100 : 100 / 3;
                const translateX = -this.currentSlide * slideWidth;

                this.track.style.transform = `translateX(${translateX}%)`;

                // Update navigation buttons
                this.prevBtn.disabled = this.currentSlide === 0;
                this.nextBtn.disabled = this.currentSlide >= this.maxSlide;

                // Update indicators
                const indicators = this.indicatorsContainer.children;
                for (let i = 0; i < indicators.length; i++) {
                    if (i === this.currentSlide) {
                        indicators[i].className = 'h-2 w-2 rounded-full bg-green-500 transition-colors';
                    } else {
                        indicators[i].className =
                            'h-2 w-2 rounded-full bg-green-300 transition-colors';
                    }
                }
            }

            nextSlide() {
                if (this.currentSlide < this.maxSlide) {
                    this.currentSlide++;
                    this.updateCarousel();
                }
            }

            prevSlide() {
                if (this.currentSlide > 0) {
                    this.currentSlide--;
                    this.updateCarousel();
                }
            }

            goToSlide(slideIndex) {
                this.currentSlide = slideIndex;
                this.updateCarousel();
            }

            handleResize() {
                window.addEventListener('resize', () => {
                    const newSlidesPerView = window.innerWidth >= 768 ? 3 : 1;
                    if (newSlidesPerView !== this.slidesPerView) {
                        this.slidesPerView = newSlidesPerView;
                        this.maxSlide = this.totalSlides - this.slidesPerView;
                        this.currentSlide = Math.min(this.currentSlide, this.maxSlide);
                        this.createIndicators();
                        this.updateCarousel();
                    }
                });
            }

            bindEvents() {
                this.nextBtn.addEventListener('click', () => this.nextSlide());
                this.prevBtn.addEventListener('click', () => this.prevSlide());

                // Keyboard navigation
                document.addEventListener('keydown', (e) => {
                    if (e.key === 'ArrowLeft') this.prevSlide();
                    if (e.key === 'ArrowRight') this.nextSlide();
                });
            }
        }

        // Initialize when DOM is loaded
        document.addEventListener('DOMContentLoaded', () => {
            new ManualCarousel();
        });
    </script>
@endpush
